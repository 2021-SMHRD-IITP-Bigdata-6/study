1. CSS를 HTML에 적용하는 세가지 방법
A :
1)  인라인 스타일(inline-style)
HTML 요소 내부에 style 속성을 사용하여 CSS 스타일을 적용하는 방법으로
태그에 직접 스타일을 지정할 떄 용이하지만 HTML과 섞여 있으므로
inline-style을 많이 작성할 경우 나중에 어느 곳에 있는지 알아내기 어려우므로
가급적 사용을 자제한다.

2) 내부 스타일 시트(Internal style sheet)
html 문서에 <style> ~ </style>을 미리 지정해서 쓰는 방법으로
해당 스타일의 적용 엘리먼트를 찾기 위해 CSS 셀렉터를 사옹하며
inline-style 방식보다는 유지보수가 쉽다 그리고 style 블럭이 별도로
있어 코드 가독성이 쉽다.
하지만 전체적인 스타일 변경 시 모든 페이지에서 일일이 수작업을 해야하는
단점이 있다.

3) 외부 스타일 시트(External style sheet)
.css 파일을 별도로 주어 디자인과 데이터가 완전히 분리된 방식으로
각 페이지에 해당 css파일
(<link rel="stylesheet" type="text/css" href="경로/파일이름.css">)을 로드할떄
같이 읽어 표현하여 스타일이 하나의 파일로 관리되므로 유지보수가 쉽고
가독성이 뛰어나다.
권장하는 방식이자 많이들 선호하는 방식으로, 전체 페이지를 잘 구조화해서
재사용이 가능한 style 고려를 해야한다.
단, 독립적인 스타일 시트 파일이기에 지속적으로 유지,보수를 해야하며
규모가 커질수록 복잡해질 가능성이 있다.

2. CSS 규칙의 우선순위는 어떻게 결정될까요?
1순위 : 속성 값 뒤에 !important 를 붙인 속성
우선순위를 무시하고, 꼭 적용 시키고 싶은 속성이 있다면
속성 값 뒤에 !important를 붙여주면 우선순위를 무시하고 상위 우선순위

2순위 : 인라인 스타일 속성
3순위 : 아이디 선택자
4순위 : 클래스/속성/가상 선택자
5순위 : 태그 선택자
6순위 : 전체 선택자

3.CSS의 박스모델은 무엇일까요? 박스가 화면에서 차지하는 크기는 어떻게 결정될까요?

박스모델(Box Model)
문서의 레이아웃을 계산할 때, 브라우저의 렌더링 엔진은 표준 CSS 기본 박스모델ㅇ
따라 각각의 요소를 사각형 박스로 표현한다. CSS는 박스의 크기, 위치, 속성 등을 결정

1)콘텐츠영역
A: 콘텐츠 경계가 감싼 영역으로, 글이나 이미지, 비디오 등 요소의 실제 내용을 포함한다.
콘텐츠 영역의 크기는 콘텐츠 너비와 콘텐츠 높이이다. 배경색과 배경 이미지를 가지고 있기도 한다.
콘텐츠 영역의 크기를 (width, max-width, height, min-height, max-height) 속성을 사용해 설정 가능

2)안쪽 여백 영역(padding영역)
안쪽 여백 경계가 감싼 영역으로, 콘텐츠 영역을 요소의 안쪽 여백까지 포함하는 크기로 확장한다.
영역의 크기는 안쪽 여백 박스 너비와 안쪽 여백 박스 높이입니다.
(padding-top, padding-right, padding-bottom, padding-left)의 속성으로 결정

3)테두리 영역(border)
테두리 경계가 감싼 영역으로 안쪽 여백 영역을 요소의 테두리까지 포함하는 크기로 확장,
영역의 크기는 테두리 박스 너비와 테두리 박스 높이입니다.
테두리 두께(border-width)와 단축 속성인 border가 결정

4)바깥 여백 영역(margin 영역)
바깥 여백 경계가 감싼 영역으로, 테두리 요소를 확장해 요소와 인근 요소 사이의
빈 공간까지 포함하도록 만든다. 영역의 크기는 바깥 여백 박스 너비와 바깥 여백 박스 높이

margin-top, margin-right, margin-bottom, margin-left와 단축 속성인
margin이 결정한다. 여백 상쇄가 발생할때는 요소 간에 바깥 여백이
공유되므로 여백 영역이 명확하게 결정되지는 않는다.

3. float 속성은 왜 좋지 않을까요?

float 속성이란
html 문서에서 공간은 차지하되 다른 요소의 배치에 영향을 주지 않는 요소

단점
1)기본적으로 이미지 정렬을 위해 등장한 CSS 스타일이지만 레이아우 정렬에도
많이 사용했다. 
2) overflow: visible인 경우, 부모 요소의 크기가 자동으로 늘어나지 않는다.
3) float 속성은 clear 하지 않는 이상 계속해서 상속이 된다.

4. Flexbox(Flexible box)와 CSS Grid의 차이와 장단점은 무엇일까요?

차이점 :  Flexbox는 행과 열을 매우 효율적으로 정렬하고 구성할 수 있기 때문에
비교적 작은 단위의 레이아웃에 적합하고, grid는 2차원의 레이아웃을 효율적으로
정렬할 수 있으므로 조금 더 큰 단위의 레이아웃을 구성할때 사용하면 좋다.

Flexbox : flexbox는 기본적으로 1차원 레이아웃을 위해 만들어졌다.
장점 : 모든 방향으로 정렬이 가능하고, reverse도 가능하다.
Container로 사용할 경우 하위 item들을 정렬하기가 매우 수월하다.
단점 : 퍼포먼스 이슈가 있다.

Grid : grid는 2차원 레이아웃을 위해 만들어졌다.
장점 : prototyping 할 떄 매우 쉽고 효율적으로 간단하게 작성하여 2차원의
레이아웃을 관리할 수 있다.
단점 : 모든 브라우저에서 지원하는것은 아니다.
