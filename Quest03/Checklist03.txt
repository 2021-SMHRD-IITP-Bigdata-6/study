Quest03
Checklist
1.자바스크립트는 버전별로 어떻게 변화하고 발전해 왔을까요?
   첫 번째 주기 : 1997년 ~ 2007년
JavaScript 첫 등장과 다양한 DOM/helper 라이브러리들(Dojo,Mootools,jQuery 등)의 등장으로
동적인 웹 개발이 시작되었던 시기라 할 수 있다.
표준화에 대한 중요성이 크게 부각되지 않았지만, 언어적 표준화(ECMScript1)가 시작되었다. 이후
ECMAScript 3/3.1을 통해 대중적인 인기가 생기기 시작했고, ECMAScript 4를 통해 커다란 변화를 꾀하기 위해 노력했지만
참여자들 간의 합의를 이끌어내는데 실해한 후, 아주 긴 시간 동안 언어적 발전이 정체됨

   두 번째 주기 : 2009년 ~ 2019년
첫 번째 주기는 JavaScript 언어적 측면의 완성을 위해 노력했던 시기라면, 
두 번째 주기는 사용자들이 JavaScript를 탐험하고 새로운 영역으로 확장시킨 시기라 할 수 있다.
ECMAScript 5 발표가 이뤄졌고, 오늘날 생태계의 핵심을 이루는 
Node.js, NPM, Transpiler, 빌드/번들러, 다양한 프레임워크가 등장하여 한 번 더 큰 도약을 이루어낸 시기였다.

   세 번째 주기 : 2020년 이후
새로운 주기에서는 레거시 영역의 정리, 그리고 여러 도구로 인해 형성된 레이어의 제거가 이뤄질 것으로 예측된다.
첫 번째로, CommonJS/AMD(RequireJS)와 같은 비표준적 모듈 사용에 의존하는 수많은 생태계가 ECMAScript 모듈(이하 ESM)로 전환될 것으로 예측된다.
또한 다양한 JavaScript 도구가 언어적으로 빌트인되어야 한다는 관점에서의 접근도 희미해질 수 있다. 타입 사용(안정성)을 통한 성능 향상은 무시하기 어려워졌고, 
그 동안의 'JavaScript를 위한 JavaScript'(JavaScript 도구는 JavaScript로 개발되어야 한다는 접근 방법)와 같은 이상적 접근 방식은 이미 TypeScript를 통해 틀렸음이 증명되었다.
그 외에도 Deno나 Relay의 경우처럼, 코어 JavaScript 도구에 JavaScript가 아닌 새로운 언어인 Rust가 사용되고 있다.

1-1 자바스크립트의 버전들을 가리키는 ES5, ES6, ES2016, ES2017 등은 무엇을 이야기할까요?
ES란?
ECMAScript의 약어로, 기술 규격에 따라 정의하고 있는 표준화된 스크립트 프로그래밍 언어를 말한다. 
자바스크립트를 표준화하기 위해 만들어졌다. 액션스크립트와 J스크립트 등 다른 구현체도 포함하고 있다.
ECMA스크립트는 웹의 클라이언트 사이드 스크립트로 많이 사용되며 Node.js를 사용한 서버 응용 프로그램 및 서비스에도 점차 많이 쓰이고 있다.

1-2 자바스크립트의 표준은 어떻게 제정될까요?

2. 자바스크립트의 문법은 다른 언어들과 비교해 어떤 특징이 있나요?
Javascript는 매우 유연한 언어로, 가장 특징적인 부분은 동적선언과 비동기처리이다.
동적선언 : Javascript에서는 자료형과 변수의 형태를 일치시키지 않아도 되는 런타임형 언어이며(컴파일이 아닌 실행 시 오류를 check), 다른 정적언어(C, C++, Java)에 비해 디버깅 오류가 자주 발생할 수 있다.
비동기처리 : Javascript의 코드실행은 순차적으로 이루어지지 않으며, 이전 코드의 실행결과가 이후 코드의 실행원인에 영향을 주는 것을 보장하지 않는다.

2-1 자바스크립트에서 반복문을 돌리는 방법은 어떤 것들이 있을까요?
if, switch,삼항 연산자, while, do while, for, for in

3. 자바스크립트를 통해 DOM 객체에 CSS Class를 주거나 없애려면 어떻게 해야 하나요?
doucument.body.style ~

4. 자바스크립트의 변수가 유효한 범위는 어떻게 결정되나요?
자바스크립트 변수 유효범위는 변수를 어디에서 접근할 수 있느냐를 가리킨다.

(1)전역 유효범위는 코드 내에서 어디서든 변수에 접근할 수 있음을 의미한다.
(2)지역 유효범위는 함수 내에서 변수를 정의하고 접근할 수 있음을 의미한다.
(3)함수 매개변수도 지역 변수로 간주하며 해당 함수의 본문 내에서 접근할 수 있다.
(4)지역 변수와 전역 변수의 이름이 같을 경우 지역 변수가 우선순위가 높다.

4-1 var과 let으로 변수를 정의하는 방법들은 어떻게 다르게 동작하나요?
Var
ES6가 등장하기 전에는 대부분 var 을 사용했다. 그러나 var로 선언된 변수에는 몇몇 문제가 있었고, 
이를 보완하기 위해 새로운 변수 선언 방식이 등장해야 했다.
var는 재선언 및 업데이트가 가능하다
즉, var 는 아래와 같이 동일한 스코프 내에서 변수 재선언을 할 수 있고 오류가 발생하지 않는다.

Let
요즘 변수 선언에는let이 더 선호된다. let은 앞서 설명한 var의 문제점들을 해결해준다.
let은 블록 스코프 내에서 작동한다.
블록(block)은 {}으로 바인딩된 코드 덩어리이다. 즉, {} 안에 있는 것은 모두 블록이다.
따라서 블록에 let으로 선언된 변수는 해당 블록 내에서만 사용할 수 있다. 예를 들어 아래 코드를 보자.
let은 업데이트할 수는 있지만 재선언할 수는 없다.
var와 마찬가지로, let으로 선언된 변수는 스코프 내에서 업데이트될 수 있다. 하지만, var와 달리 let 변수는 해당 스코프 내에서 다시 선언할 수 없다.

5. 자바스크립트의 익명 함수는 무엇인가요?
자바스크립트 익명 함수는 함수명 대신 변수명에 함수 코드를 저장하는 구현 방식입니다. 
익명 함수의 소스 코드는 변수값이므로 끝에 세미콜론 ; 을 대입합니다. 익명 함수는 호출시 변수명을 함수명처럼 사용하면 됩니다.

5-1 자바스크립트의 Arrow function은 무엇일까요?
Arrow function = 화살표 함수
화살표 함수(Arrow function)는 function 키워드 대신 화살표(=>)를 사용하여 보다 간략한 방법으로 함수를 선언할 수 있다. 
하지만 모든 경우 화살표 함수를 사용할 수 있는 것은 아니다. 화살표 함수의 기본 문법은 아래와 같다.

○선언
// 매개변수 지정 방법
    () => { ... } // 매개변수가 없을 경우
     x => { ... } // 매개변수가 한 개인 경우, 소괄호를 생략할 수 있다.
(x, y) => { ... } // 매개변수가 여러 개인 경우, 소괄호를 생략할 수 없다.

// 함수 몸체 지정 방법
x => { return x * x }  // single line block
x => x * x             // 함수 몸체가 한줄의 구문이라면 중괄호를 생략할 수 있으며 암묵적으로 return된다. 위 표현과 동일하다.

() => { return { a: 1 }; }
() => ({ a: 1 })  // 위 표현과 동일하다. 객체 반환시 소괄호를 사용한다.

() => {           // multi line block.
  const x = 10;
  return x * x;
};

○호출
// ES6
const pow = x => x * x;
console.log(pow(10)); // 100